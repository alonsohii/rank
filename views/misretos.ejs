<html>
<head>
  <title> <%= title %></title>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.9.2/themes/base/jquery-ui.css" />    
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.9.2/jquery-ui.min.js"></script>




   <link rel="stylesheet"
     href="http://ajax.googleapis.com/ajax/libs/jqueryui/1.9.2/themes/base/jquery-ui.css" />
 <!--  <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>     -->

 


  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/js/bootstrap.min.js"></script>
  <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/lodash.js/0.10.0/lodash.min.js"></script>
  <script type="text/javascript" src="http://alasql.org/codex/lib/alasql/alasql.min.js"></script>
  <script type="text/javascript" src=" https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.15.0/jquery.validate.min.js"></script>

  <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>



      <!--pqSelect-->
    <link rel="Stylesheet" href="../grid/pqselect.min.css" />   
    <script src="../grid/pqselect.min.js"></script>
     
    <!--link rel="stylesheet" href="/Content/css/pqgrid.min.css" /-->    
    <link rel="stylesheet" href="../grid/pqgrid.min.css" />    

    <script src="../grid/touch-punch.js"></script>

    <!--script src="/Content/js/pqgrid.min.js"></script-->    
    <script src="../grid/pqgrid.min.js"></script>    


<style>

div.pq-grid *
{
    font-size:12px;    
}
button.delete_btn
{
    margin:-2px 0px;
}
button.edit_btn
{
    margin:-3px 0px;
    height: 40;
}
tr.pq-grid-row td
{
    color:#888;
}
tr.pq-row-edit > td
{
    color:#000;
}
tr.pq-row-delete
{
    text-decoration:line-through;         
}
tr.pq-row-delete td
{
    background-color:pink;   
}

input.filterValue{    
    border:1px solid #aaa;padding:1px 5px;
    margin:0px 5px;
}
  .custoComb {
   background-color: #cccccc;
      background: #cccccc;
      color: #fff;
      text-shadow: 0 1px 0 rgba(0, 0, 0, 0.4);
  }
  .custom-combobox {
    position: relative;
    display: inline-block;
  }
  .custom-combobox-toggle {
    position: absolute;
    top: 0;
    bottom: 0;
    margin-left: -1px;
    padding: 0;
  }
  .custom-combobox-input {
    margin: 0;
    padding: 5px 10px;
  }
  </style>
   <script type="text/javascript" src=" ../js/adicional.js"></script>
 <script>


function Reto(arg){

    if (confirm("Estas seguro?\nDeseas cancelar este reto")) { 

       $.get("http://localhost:8080/api/CancelarReto?idreto="+arg+"&token="+localStorage.getItem('tk'), function(data, status){

               $("#grid_array").pqGrid("refreshDataAndView");

         }); 
    }
   
}

 function Grid(){

  
    $(function () {
        //define common ajax object for addition, update and delete.
        var ajaxObj = {
            dataType: "JSON",
            beforeSend: function () {
                this.pqGrid("showLoading");
            },
            complete: function () {
                this.pqGrid("hideLoading");
            },
            error: function () {
                this.pqGrid("rollback");
            }
        };

        //to check whether any row is currently being edited.
        function isEditing($grid) {
            var rows = $grid.pqGrid("getRowsByClass", { cls: 'pq-row-edit' });
            if (rows.length > 0) {
                //focus on editor if any 
                $grid.find(".pq-editor-focus").focus();
                return true;
            }
            return false;
        }
        //called by add button in toolbar.
        function addRow($grid) {
            if (isEditing($grid)) {
                return false;
            }
            //append empty row in the first row.                            
            var rowData = { UnitPrice: 0, UnitsInStock: 0, UnitsOnOrder: 0, Discontinued: false, ProductName: "" }; //empty row template
            $grid.pqGrid("addRow", { rowIndxPage: 0, rowData: rowData });

            var $tr = $grid.pqGrid("getRow", { rowIndxPage: 0 });
            if ($tr) {
                //simulate click on edit button.
                $tr.find("button.edit_btn").click();
            }
        }
        //called by delete button.
        function deleteRow(rowIndx, $grid) {
            $grid.pqGrid("addClass", { rowIndx: rowIndx, cls: 'pq-row-delete' });
            var rowData = $grid.pqGrid("getRowData", { rowIndx: rowIndx });
            var ans = window.confirm("Are you sure to delete row No " + (rowIndx + 1) + "?");

            if (ans) {
                $grid.pqGrid("deleteRow", { rowIndx: rowIndx, effect: true });

                var ProductID = $grid.pqGrid("getRecId", { rowIndx: rowIndx });

                $.ajax($.extend({}, ajaxObj, {
                    context: $grid,
                    url: "/pro/products/delete",
                    //url: "/pro/products.php?pq_delete=1",//for PHP
                    data: { ProductID: ProductID },
                    success: function () {
                        this.pqGrid("commit");
                        this.pqGrid("refreshDataAndView");
                    },
                    error: function () {
                        //debugger;
                        this.pqGrid("removeClass", { rowData: rowData, cls: 'pq-row-delete' });
                        this.pqGrid("rollback");
                    }
                }));
            }
            else {
                $grid.pqGrid("removeClass", { rowIndx: rowIndx, cls: 'pq-row-delete' });
            }
        }
        //called by edit button.
        function editRow(rowIndx, $grid) {

            $grid.pqGrid("addClass", { rowIndx: rowIndx, cls: 'pq-row-edit' });
            $grid.pqGrid("editFirstCellInRow", { rowIndx: rowIndx });

            //change edit button to update button and delete to cancel.
            var $tr = $grid.pqGrid("getRow", { rowIndx: rowIndx }),
                $btn = $tr.find("button.edit_btn");
            $btn.button("option", { label: "Confirmar Resultado", "icons": { primary: "ui-icon-check"} })
                .unbind("click")
                .click(function (evt) {
                    evt.preventDefault();
                    return update(rowIndx, $grid);
                });
            $btn.next().button("option", { label: "Cancel", "icons": { primary: "ui-icon-cancel"} })
                .unbind("click")
                .click(function (evt) {
                    $grid.pqGrid("quitEditMode");
                    $grid.pqGrid("removeClass", { rowIndx: rowIndx, cls: 'pq-row-edit' });
                    $grid.pqGrid("refreshRow", { rowIndx: rowIndx });
                    $grid.pqGrid("rollback");
                });
        }
        //called by update button.
        function update(rowIndx, $grid) {

            if ($grid.pqGrid("saveEditCell") == false) {
                return false;
            }

            var isValid = $grid.pqGrid("isValid", { rowIndx: rowIndx }).valid;
            if (!isValid) {
                return false;
            }
            var isDirty = $grid.pqGrid("isDirty");
            if (isDirty) {
                var url,
                    rowData = $grid.pqGrid("getRowData", { rowIndx: rowIndx }),
                    recIndx = $grid.pqGrid("option", "dataModel.recIndx");

                $grid.pqGrid("removeClass", { rowIndx: rowIndx, cls: 'pq-row-edit' });

                if (rowData[recIndx] == null) {
                    //url to add records.
                    url = "/pro/products/add";
                    //url = "/pro/products.php?pq_add=1";for PHP
                }
                else {
                    //url to  update records.
                    url = "/pro/products/update";
                    //url = "/pro/products.php?pq_update=1";for PHP
                }
                $.ajax($.extend({}, ajaxObj, {
                    context: $grid,
                    url: url,
                    data: rowData,
                    success: function (response) {
                        var recIndx = this.pqGrid("option", "dataModel.recIndx");
                        if (rowData[recIndx] == null) {
                            rowData[recIndx] = response.recId;
                        }
                        this.pqGrid("removeClass", { rowIndx: rowIndx, cls: 'pq-row-edit' });
                        this.pqGrid("commit");
                    }
                }));
            }
            else {
                $grid.pqGrid("quitEditMode");
                $grid.pqGrid("removeClass", { rowIndx: rowIndx, cls: 'pq-row-edit' });
                $grid.pqGrid("refreshRow", { rowIndx: rowIndx });
            }
        }
        //define the grid.
        var obj = { 
            width:1200,                       
            wrap: false,
            hwrap: false,
            resizable: true,
            columnBorders: false,
            sortable: false,
            numberCell: { show: false },
            track: true, //to turn on the track changes.
            flexHeight: true,
           /* toolbar: {
                items: [
                    { type: 'button', icon: 'ui-icon-plus', label: 'Add Product', listeners: [
                        { "click": function (evt, ui) {
                            var $grid = $(this).closest('.pq-grid');
                            addRow($grid);
                            //debugger;
                        }
                        }
                    ]
                    }
                ]
            },*/
            scrollModel: {
                autoFit: true
            },
            selectionModel: {
                //type: 'cell'
                type: 'none'
            },
            hoverMode: 'cell',
            editModel: {
                //onBlur: 'validate',
                saveKey: $.ui.keyCode.ENTER
            },
            editor: { type: 'textbox', select: true, style: 'outline:none;' },
            validation: {
                icon: 'ui-icon-info'
            },
            title: "<b>Inline Editing</b>",

            colModel: [
                    { title: "Fecha reto", dataType: "date", dataIndx: "registro", editable: false, width: 80 },
                    { title: "Local", width: 165, dataType: "string", dataIndx: "ulocal", editable: true
                      /*  validations: [
                            { type: 'minLen', value: 1, msg: "Required" },
                            { type: 'maxLen', value: 40, msg: "length should be <= 40" }
                        ]*/
                    },
          
                    { title: "", editable: false, minWidth: 95, sortable: false, render: function (ui) {
                        return "<button type='button' class='edit_btn btn btn-info' id= 'bt'>- Actualizar Resultado - </button>";
                    }
                    }
            ],
            dataModel: {
                dataType: "JSON",
                location: "remote",
                recIndx: "registro",
                url: "http://localhost:8080/api/partidos?token="+localStorage.getItem('tk'),
                //url: "/pro/products.php",//for PHP
                getData: function (response) {
                    return { data: response.data,  totalRecords: response.totalRecords };
                }
            },
            pageModel: { type: "remote" },
            cellBeforeSave: function (evt, ui) {
                var $grid = $(this);
                var isValid = $grid.pqGrid("isValid", ui);
                if (!isValid.valid) {
                    return false;
                }
            },
            //make rows editable selectively.
            editable: function (ui) {
                var $grid = $(this);
                var rowIndx = ui.rowIndx;
                if ($grid.pqGrid("hasClass", { rowIndx: rowIndx, cls: 'pq-row-edit' }) == true) {
                    return true;
                }
                else {
                    return false;
                }
            }
        };
        var $grid = $("#grid_editing").pqGrid(obj);
        //use refresh & refreshRow events to display jQueryUI buttons and bind events.
        $grid.on('pqgridrefresh pqgridrefreshrow', function () {
            //debugger;
            var $grid = $(this);

            //delete button
            $grid.find("button.delete_btn").button({ icons: { primary: 'ui-icon-close'} })
            .unbind("click")
            .bind("click", function (evt) {
                if (isEditing($grid)) {
                    return false;
                }
                var $tr = $(this).closest("tr"),
                    rowIndx = $grid.pqGrid("getRowIndx", { $tr: $tr }).rowIndx;
                deleteRow(rowIndx, $grid);
            });
            //edit button
            $grid.find("button.edit_btn").button({ icons: { primary: 'ui-icon-pencil'} })
            .unbind("click")
            .bind("click", function (evt) {
                if (isEditing($grid)) {
                    return false;
                }
                var $tr = $(this).closest("tr"),
                    rowIndx = $grid.pqGrid("getRowIndx", { $tr: $tr }).rowIndx;
                editRow(rowIndx, $grid);
                return false;
            });

            //rows which were in edit mode before refresh, put them in edit mode again.
            var rows = $grid.pqGrid("getRowsByClass", { cls: 'pq-row-edit' });
            if (rows.length > 0) {
                var rowIndx = rows[0].rowIndx;
                editRow(rowIndx, $grid);
            }
        });        
    });


 }



  $( function() {
    $.widget( "custom.combobox", {
      _create: function() {
        this.wrapper = $( "<span>" )
          .addClass( "custom-combobox" )
          .insertAfter( this.element );
 
        this.element.hide();
        this._createAutocomplete();
        this._createShowAllButton();
      },
 
      _createAutocomplete: function() {
        var selected = this.element.children( ":selected" ),
          value = selected.val() ? selected.text() : "";
 
        this.input = $( "<input>" )
          .appendTo( this.wrapper )
          .val( value )
          .attr( "title", "" )
          .addClass( "custom-combobox-input ui-widget ui-widget-content ui-state-default ui-corner-left" )
          .autocomplete({
            delay: 0,
            minLength: 0,
            source: $.proxy( this, "_source" )
          })
          .tooltip({
            classes: {
              "ui-tooltip": "ui-state-highlight"
            }
          });
 
        this._on( this.input, {
          autocompleteselect: function( event, ui ) {
            ui.item.option.selected = true;
            this._trigger( "select", event, {
              item: ui.item.option
            });
          },
 
          autocompletechange: "_removeIfInvalid"
        });
      },
 
      _createShowAllButton: function() {
        var input = this.input,
          wasOpen = false;
 
        $( "<a>" )
          .attr( "tabIndex", -1 )
          .attr( "title", "Show All Items" )
          .tooltip()
          .appendTo( this.wrapper )
          .button({
            icons: {
              primary: "ui-icon-triangle-1-s"
            },
            text: false
          })
          .removeClass( "ui-corner-all" )
          .addClass( "custom-combobox-toggle ui-corner-right" )
          .on( "mousedown", function() {
            wasOpen = input.autocomplete( "widget" ).is( ":visible" );
          })
          .on( "click", function() {
            input.trigger( "focus" );
 
            // Close if already visible
            if ( wasOpen ) {
              return;
            }
 
            // Pass empty string as value to search for, displaying all results
            input.autocomplete( "search", "" );
          });
      },
 
      _source: function( request, response ) {
        var matcher = new RegExp( $.ui.autocomplete.escapeRegex(request.term), "i" );
        response( this.element.children( "option" ).map(function() {
          var text = $( this ).text();
          if ( this.value && ( !request.term || matcher.test(text) ) )
            return {
              label: text,
              value: text,
              option: this
            };
        }) );
      },
 
      _removeIfInvalid: function( event, ui ) {
 
        // Selected an item, nothing to do
        if ( ui.item ) {
          return;
        }
 
        // Search for a match (case-insensitive)
        var value = this.input.val(),
          valueLowerCase = value.toLowerCase(),
          valid = false;
        this.element.children( "option" ).each(function() {
          if ( $( this ).text().toLowerCase() === valueLowerCase ) {
            this.selected = valid = true;
            return false;
          }
        });
 
        // Found a match, nothing to do
        if ( valid ) {
          return;
        }
 
        // Remove invalid value
        this.input
          .val( "" )
          .attr( "title", value + " didn't match any item" )
          .tooltip( "open" );
        this.element.val( "" );
        this._delay(function() {
          this.input.tooltip( "close" ).attr( "title", "" );
        }, 2500 );
        this.input.autocomplete( "instance" ).term = "";
      },
 
      _destroy: function() {
        this.wrapper.remove();
        this.element.show();
      }
    });
 
    $( "#combobox" ).combobox();
    $( "#toggle" ).on( "click", function() {
      $( "#combobox" ).toggle();
    });
  } );
  </script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap-theme.min.css"> 


  <link rel="stylesheet" href="../css/adicional.css">

  <script>


  
$(document).ready(function() {
         $("#Notificacion").hide();
          $("#Correcto").hide();
         $("#registro").click(function(){
  debugger;      
          var contrincante = $("#combobox").val();

var esvalido  = false;
var campos = ["Contrincante"];
var valores = [contrincante];
  esvalido = validarCamposStr(valores,campos);



if(esvalido){

var camposjson = CamposJson('#combobox');
camposjson.retador = jQuery.data( document, "usuario")[0].id.toString();
camposjson.retadorStr =  jQuery.data( document, "usuario")[0].usuario
camposjson.visitante = $( "#combobox option:selected" ).text();

    if(camposjson.retadorStr != camposjson.visitante){

                             $("#Notificacion").hide(350);
                                 $.post( "http://localhost:8080/api/reto?token="+localStorage.getItem('tk'), camposjson )
                                  .done(function( data ) {
                                    debugger;
                                    // $("#grid_array").html(null);  

                                   if(data.sobrepasa){
                                     Error('El limite es de 5 retos al dia con el mismo jugador , este se ha terminado.');
                                   }else{ 
                                       if(!data.success){
                                             Error('Surgio un error interno del servidor.');
                                        }else{

                                            if(!data.success){
                                                 Error('Este correo ya se encuentra registrado.');
                                            }else{
                                                  $("#grid_array").pqGrid("refreshDataAndView");
                                                  $("#Correcto").hide(50);
                                                  $("#Correcto").html('Bien! Reto hecho  a '+camposjson.visitante+' correctamente te quedan '+data.conteo[0].COUNTEOS+' retos por hacer al mismo jugador');
                                                  $("#Correcto").show(350);

                                                  
                                            }
                                        }

                                   }

                                   
                                  })
                                   .fail(function(xhr, status, error) {
                                         Error('Surgio un error interno del servidor.');
                                            $("#Correcto").hide(50);
                                          //  $("#Correcto").hide(350);
                                    }) ;

    }else {       Error('No puedes retarte ati mismo.');       }


}else{// else es valido

}

      });

});
</script>

</head>
<body>
<%- include('header'); %>



<div class="container containerBorder">
  <div class="row">
<div class="col-xs-12" id="demoContainer">
  <div class="alert alert-success" id="Correcto">
    <strong>Bien!</strong> Registro Hecho exitosamente.
  </div>
<div class="alert alert-danger" id="Notificacion" >
  <strong>Error!</strong><p id="textnot" ></p>
</div>
    <div id="registrationForm2" class="form-horizontal fv-form fv-form-bootstrap" novalidate="novalidate"  target="none" action="">
                 <!--  <button type="submit" class="fv-hidden-submit" style="display: none; width: 0px; height: 0px;"></button> -->
    <div class="form-group">
        <label class="col-xs-3 control-label">Partida</label>
        <div class="col-xs-4">
            <input type="text" class="form-control custoComb" name="local" id="local" placeholder="Contrincante" value='' disabled="" />
        </div>
        <div class="col-xs-4">
            <select class="form-control" name="visitante" id="combobox">
               
            </select>
        </div>

    </div>


    <script>

    $(function() {
      $.when($.get("http://localhost:8080/api/getuser?token="+localStorage.getItem('tk'), function(data, status){
          
            jQuery.data( document, "usuario",data );

       })).then(function( data, textStatus, jqXHR ) {
           $('#local').val(jQuery.data( document, "usuario")[0].usuario);
           Grid();
            //$("#combobox").val('');
        });  

        $.when( $.get("http://localhost:8080/api/usuarios?token="+localStorage.getItem('tk'), function(data, status){
          
            jQuery.data( document, "paises",data );

          })).then(function( data, textStatus, jqXHR ) {
            ComboUsuarios();
        });      
    });

    function Where(data,value){
     return  _.filter(data, function(item, index) {
         return _.contains([value], item.iso);
    });

    }
var adress;
var idpais;

    function ComboUsuarios(){



        $.when($.getJSON('http://api.wipmania.com/jsonp?callback=?', function (data) {
                adress =  data.address.country;
            })).then(function( data, textStatus, jqXHR ) {
           $.each(   jQuery.data( document, "paises"), function( i, l ){

            $( "#combobox" ).append( " <option value='"+l.id+"'>" + l.nombre +"</option>" );
           if(adress == l.Pais ){
               idpais = l.Id;
            }
          });

        $("#combobox").val(idpais);

        });

    }

    function GroupBy(data){

      return  _
        .chain(data)
        .groupBy('Nombre')
        .sort('Nombre')
        .map(function(value, key) {
            return {
                Pais: key,
                Id: value[0].id,
                Iso: value[0].iso
               // paises: _.pluck(value, 'Nombre')
            }
        })
        .value();
    }
    </script>


    </div>





    <div class="form-group">
        <div class="col-xs-9 col-xs-offset-3">
            <button class="btn btn-primary" name="signup" value="Sign up" id='registro' >Retar ahora!</button>
        </div>
    </div>






</div>
    </div>
  </div>



   <div id="grid_editing" class='container containerBorder' style="margin: auto;">
</div>










  </div>
</body>
</html>
